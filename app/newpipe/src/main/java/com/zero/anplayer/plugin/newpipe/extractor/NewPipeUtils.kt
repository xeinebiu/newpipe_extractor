package com.zero.anplayer.plugin.newpipe.extractor

import android.net.Uri
import com.xeinebiu.anplayer.plugin.base.media.extractor.enum.MediaFormat
import com.xeinebiu.anplayer.plugin.base.media.extractor.model.Comment
import com.xeinebiu.anplayer.plugin.base.media.extractor.model.MediaStream
import com.xeinebiu.anplayer.plugin.base.media.extractor.model.Subtitle
import com.xeinebiu.anplayer.plugin.base.media.extractor.model.descriptor.AlbumDescriptor
import com.xeinebiu.anplayer.plugin.base.media.extractor.model.descriptor.AuthorDescriptor
import com.xeinebiu.anplayer.plugin.base.media.extractor.model.descriptor.MediaDescriptor
import com.xeinebiu.anplayer.plugin.base.media.extractor.model.descriptor.MediaTrackDescriptor
import com.xeinebiu.utils.MediaUtils
import com.xeinebiu.utils.endpoint
import org.schabi.newpipe.extractor.InfoItem
import org.schabi.newpipe.extractor.channel.ChannelInfoItem
import org.schabi.newpipe.extractor.comments.CommentsInfoItem
import org.schabi.newpipe.extractor.playlist.PlaylistInfoItem
import org.schabi.newpipe.extractor.stream.StreamInfoItem
import org.schabi.newpipe.extractor.stream.SubtitlesStream

object NewPipeUtils {
    private val DEFAULT_THUMBNAIL = Uri.parse("https://www.sgscc.edu.au/s/img/blank.png")

    fun <T: InfoItem> toMediaDescriptors(
        extractorCode: String,
        items: List<T>?
    ): List<MediaDescriptor> {
        return items?.mapNotNull {
            toMediaDescriptor(extractorCode, it)
        } ?: emptyList()
    }

    fun toMediaDescriptor(
        extractorCode: String,
        infoItem: InfoItem,
        isVideo: Boolean = true
    ): MediaDescriptor? {
        val smallThumb = Uri.parse(infoItem.thumbnailUrl)
        val mediumThumb = Uri.parse(infoItem.thumbnailUrl)
        val highThumb = Uri.parse(infoItem.thumbnailUrl)
        val uri = Uri.parse(infoItem.url)
        return when (infoItem) {
            is StreamInfoItem -> {
                MediaTrackDescriptor(
                    extractorCode,
                    infoItem.url,
                    uri.endpoint(),
                    infoItem.name,
                    "",
                    smallThumb,
                    mediumThumb,
                    highThumb,
                    uri,
                    AuthorDescriptor(
                        extractorCode,
                        infoItem.uploaderUrl,
                        Uri.parse(infoItem.uploaderUrl).endpoint(),
                        infoItem.uploaderName,
                        "",
                        DEFAULT_THUMBNAIL,
                        DEFAULT_THUMBNAIL,
                        DEFAULT_THUMBNAIL,
                        Uri.parse(infoItem.uploaderUrl)
                    ),
                    MediaUtils.readableMediaDuration(infoItem.duration * 1000),
                    isVideo
                )
            }
            is ChannelInfoItem -> {
                AuthorDescriptor(
                    extractorCode,
                    infoItem.url,
                    uri.endpoint(),
                    infoItem.name,
                    infoItem.description,
                    smallThumb,
                    mediumThumb,
                    highThumb,
                    uri
                )
            }
            is PlaylistInfoItem -> {
                AlbumDescriptor(
                    extractorCode,
                    infoItem.url,
                    uri.endpoint(),
                    infoItem.name,
                    "",
                    smallThumb,
                    mediumThumb,
                    highThumb,
                    uri,
                    AuthorDescriptor(
                        extractorCode,
                        "",
                        "",
                        infoItem.uploaderName,
                        "",
                        DEFAULT_THUMBNAIL,
                        DEFAULT_THUMBNAIL,
                        DEFAULT_THUMBNAIL,
                        Uri.parse("")
                    )
                )
            }
            else -> null
        }
    }

    fun toSubtitle(extractorCode: String, subtitlesStream: SubtitlesStream): Subtitle {
        return Subtitle(
            subtitlesStream.displayLanguageName,
            subtitlesStream.extension,
            MediaFormat.getByName(
                subtitlesStream.format.getName()
            ),
            subtitlesStream.isAutoGenerated,
            subtitlesStream.locale,
            Uri.parse(subtitlesStream.getUrl()),
            extractorCode
        )
    }

    fun toComment(extractorCode: String, commentItem: CommentsInfoItem): Comment =
        Comment(
            extractorCode,
            commentItem.commentId,
            commentItem.textualUploadDate,
            commentItem.commentText,
            commentItem.likeCount,
            AuthorDescriptor(
                extractorCode,
                commentItem.uploaderUrl,
                Uri.parse(commentItem.uploaderUrl).endpoint(),
                commentItem.uploaderName,
                "",
                Uri.parse(commentItem.uploaderAvatarUrl),
                Uri.parse(commentItem.uploaderAvatarUrl),
                Uri.parse(commentItem.uploaderAvatarUrl),
                Uri.parse(commentItem.uploaderUrl)
            )
        )

    fun toMediaStream(
        extractorCode: String,
        format: MediaFormat,
        resolution: String,
        quality: Int,
        length: Long,
        typeMusicVideo: Int,
        url: String
    ): MediaStream =
        MediaStream(
            extractorCode,
            format,
            resolution,
            quality,
            length,
            typeMusicVideo,
            Uri.parse(url)
        )
}